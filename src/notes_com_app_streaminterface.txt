1. A Program to show how to use of method:
Program: StreamInterfaceProgram1.java
Notes:
* This method returns a sequential stream containing a single element.
* If the given element is null then it throw java.lang.NullPointerException, means it will not accept null element.
* Method signature:
public static<T> Stream<T> of(T t)
Output:
------ Stream elements ------
15
----------------------------------------------------------------------------------

2. A Program to show how to use ofNullable method:
Program: StreamInterfaceProgram2.java
Notes:
* This method returns a sequential stream containing a single element, if non-null, otherwise returns an empty stream
* Method signature:
public static<T> Stream<T> ofNullable(T t)
Output:
--- Stream of null element ---
--- Stream of not null element ---
10
----------------------------------------------------------------------------------

3. A Program to show how to use of method[var argument]:
Program: StreamInterfaceProgram3.java
Notes:
* This method returns a sequential ordered stream whose elements are the specified values.
* Method signature:
public static<T> Stream<T> of(T... values)
Output:
--- Number stream elements ---
0
1
2
3
4
5
--- String stream elements ---
s
a
g
a
r
----------------------------------------------------------------------------------

4. A Program to show how to use filter method:
Program: StreamInterfaceProgram4.java
Notes:
* Method signature:
Stream<T> filter(Predicate<? super T> predicate)
Output:
--- Filter price lessthan or equals to 150.00 ---
Product [productId=1, productCode=P001, producName=Books, quantity=12, price=25.0]
Product [productId=2, productCode=P002, producName=Pencils, quantity=54, price=5.0]
Product [productId=4, productCode=P004, producName=Balls, quantity=34, price=30.0]
Product [productId=5, productCode=P005, producName=Pens, quantity=120, price=15.0]
Product [productId=7, productCode=P007, producName=Box, quantity=45, price=150.0]
--- Filter quantity greaterThan or equals to 50 ---
Product [productId=2, productCode=P002, producName=Pencils, quantity=54, price=5.0]
Product [productId=5, productCode=P005, producName=Pens, quantity=120, price=15.0]
----------------------------------------------------------------------------------

5. A Program to show how to use map method:
Program: StreamInterfaceProgram5.java
Notes:
* Method signature:
<R> Stream<R> map(Function<? super T, ? extends R> mapper)
Output:
--- Get product code and name ---
Books[P001]
Pencils[P002]
Bags[P003]
Balls[P004]
Pens[P005]
Bats[P006]
Box[P007]
---- To multiply quantity and price of each product ----
300.0
270.0
6000.0
1020.0
1800.0
5600.0
6750.0
----------------------------------------------------------------------------------

6. A Program to show how to use mapToInt, mapToLong and mapToDouble method:
Program: StreamInterfaceProgram6.java
Notes:
* Method signature:
IntStream mapToInt(ToIntFunction<? super T> mapper)
LongStream mapToLong(ToLongFunction<? super T> mapper)
DoubleStream mapToDouble(ToDoubleFunction<? super T> mapper)
Output:
--- Get quantity from product ---
12
54
24
34
120
10
45
--- Get quantity from product ---
12
54
24
34
120
10
45
--- Get price from product ---
25.0
5.0
250.0
30.0
15.0
560.0
150.0
--- Get multiply quantity and price of product ---
300.0
270.0
6000.0
1020.0
1800.0
5600.0
6750.0
----------------------------------------------------------------------------------

7. A Program to show how to use flatMap method:
Program: StreamInterfaceProgram7.java
Notes:
* Method signature:
<R> Stream<R> flatMap(Function<? super T, ? extends Stream<? extends R>> mapper)
Output:
----- All Students PhoneNumber List -----
9876543210
9876543201
9876543021
9876540321
9876504321
9876054321
9870543201
9806543021
9870654321
9876543200
9876543001
9876543010
9876540201
9876503021
9876043210
9870543201
9806543021
9876540021
----------------------------------------------------------------------------------

8. A Program to show how to use distinct method:
Program: StreamInterfaceProgram8.java
Notes:
* Method signature:
Stream<T> distinct()
Output:
---- Without distinct method ----
2
4
5
3
5
6
2
---- With distinct method ----
2
4
5
3
6
----------------------------------------------------------------------------------

9. A Program to show how to use sorted method:
Program: StreamInterfaceProgram9.java
Notes:
* Method signature:
Stream<T> sorted()
* If the elements of this stream are not Comparable, a java.lang.ClassCastException may be thrown when the terminal operation is executed. 
Output:
----- Employee list -----
Employee [eid=E01, ename=Akash, age=25, esal=25000.0]
Employee [eid=E02, ename=Mukesh, age=29, esal=35000.0]
Employee [eid=E05, ename=Vignesh, age=28, esal=30000.0]
Employee [eid=E03, ename=Ramesh, age=21, esal=19000.0]
Employee [eid=E04, ename=Avinash, age=31, esal=55000.0]
----- Employees are sorted by Employee object natural order -----
Employee [eid=E01, ename=Akash, age=25, esal=25000.0]
Employee [eid=E04, ename=Avinash, age=31, esal=55000.0]
Employee [eid=E02, ename=Mukesh, age=29, esal=35000.0]
Employee [eid=E03, ename=Ramesh, age=21, esal=19000.0]
Employee [eid=E05, ename=Vignesh, age=28, esal=30000.0]
----------------------------------------------------------------------------------

10. A Program to show how to use sorted method:
Program: StreamInterfaceProgram10.java
Notes:
* Method signature:
Stream<T> sorted(Comparator<? super T> comparator)
Output:
----- Student fullName sorted by ascending order -----
Student [studentId=S002, firstName=Akash, lastName=Komma, fullName=Akash Komma, age=21, courseFee=28000.0, phoneNumbers=[9876540321, 9876504321, 9876054321, 9870543201, 9806543021]]
Student [studentId=S003, firstName=Avinath, lastName=Karre, fullName=Avinath Karre, age=26, courseFee=30000.0, phoneNumbers=[9870654321]]
Student [studentId=S005, firstName=Ganesh, lastName=Poly, fullName=Ganesh Poly, age=31, courseFee=29000.0, phoneNumbers=[9876543010, 9876540201, 9876503021]]
Student [studentId=S007, firstName=Mahi, lastName=, fullName=Mahi , age=26, courseFee=28500.0, phoneNumbers=[]]
Student [studentId=S001, firstName=Ravi, lastName=Rajam, fullName=Ravi Rajam, age=25, courseFee=25000.0, phoneNumbers=[9876543210, 9876543201, 9876543021]]
Student [studentId=S006, firstName=Vijay, lastName=Peddi, fullName=Vijay Peddi, age=22, courseFee=28500.0, phoneNumbers=[9876043210, 9870543201, 9806543021, 9876540021]]
Student [studentId=S004, firstName=Zaffer, lastName=MD, fullName=Zaffer MD, age=29, courseFee=35000.0, phoneNumbers=[9876543200, 9876543001]]
----- Student fullName sorted by descending order -----
Student [studentId=S004, firstName=Zaffer, lastName=MD, fullName=Zaffer MD, age=29, courseFee=35000.0, phoneNumbers=[9876543200, 9876543001]]
Student [studentId=S006, firstName=Vijay, lastName=Peddi, fullName=Vijay Peddi, age=22, courseFee=28500.0, phoneNumbers=[9876043210, 9870543201, 9806543021, 9876540021]]
Student [studentId=S001, firstName=Ravi, lastName=Rajam, fullName=Ravi Rajam, age=25, courseFee=25000.0, phoneNumbers=[9876543210, 9876543201, 9876543021]]
Student [studentId=S007, firstName=Mahi, lastName=, fullName=Mahi , age=26, courseFee=28500.0, phoneNumbers=[]]
Student [studentId=S005, firstName=Ganesh, lastName=Poly, fullName=Ganesh Poly, age=31, courseFee=29000.0, phoneNumbers=[9876543010, 9876540201, 9876503021]]
Student [studentId=S003, firstName=Avinath, lastName=Karre, fullName=Avinath Karre, age=26, courseFee=30000.0, phoneNumbers=[9870654321]]
Student [studentId=S002, firstName=Akash, lastName=Komma, fullName=Akash Komma, age=21, courseFee=28000.0, phoneNumbers=[9876540321, 9876504321, 9876054321, 9870543201, 9806543021]]
----- Student age sorted by ascending order -----
Student [studentId=S002, firstName=Akash, lastName=Komma, fullName=Akash Komma, age=21, courseFee=28000.0, phoneNumbers=[9876540321, 9876504321, 9876054321, 9870543201, 9806543021]]
Student [studentId=S006, firstName=Vijay, lastName=Peddi, fullName=Vijay Peddi, age=22, courseFee=28500.0, phoneNumbers=[9876043210, 9870543201, 9806543021, 9876540021]]
Student [studentId=S001, firstName=Ravi, lastName=Rajam, fullName=Ravi Rajam, age=25, courseFee=25000.0, phoneNumbers=[9876543210, 9876543201, 9876543021]]
Student [studentId=S003, firstName=Avinath, lastName=Karre, fullName=Avinath Karre, age=26, courseFee=30000.0, phoneNumbers=[9870654321]]
Student [studentId=S007, firstName=Mahi, lastName=, fullName=Mahi , age=26, courseFee=28500.0, phoneNumbers=[]]
Student [studentId=S004, firstName=Zaffer, lastName=MD, fullName=Zaffer MD, age=29, courseFee=35000.0, phoneNumbers=[9876543200, 9876543001]]
Student [studentId=S005, firstName=Ganesh, lastName=Poly, fullName=Ganesh Poly, age=31, courseFee=29000.0, phoneNumbers=[9876543010, 9876540201, 9876503021]]
----- Student age sorted by descending order -----
Student [studentId=S005, firstName=Ganesh, lastName=Poly, fullName=Ganesh Poly, age=31, courseFee=29000.0, phoneNumbers=[9876543010, 9876540201, 9876503021]]
Student [studentId=S004, firstName=Zaffer, lastName=MD, fullName=Zaffer MD, age=29, courseFee=35000.0, phoneNumbers=[9876543200, 9876543001]]
Student [studentId=S003, firstName=Avinath, lastName=Karre, fullName=Avinath Karre, age=26, courseFee=30000.0, phoneNumbers=[9870654321]]
Student [studentId=S007, firstName=Mahi, lastName=, fullName=Mahi , age=26, courseFee=28500.0, phoneNumbers=[]]
Student [studentId=S001, firstName=Ravi, lastName=Rajam, fullName=Ravi Rajam, age=25, courseFee=25000.0, phoneNumbers=[9876543210, 9876543201, 9876543021]]
Student [studentId=S006, firstName=Vijay, lastName=Peddi, fullName=Vijay Peddi, age=22, courseFee=28500.0, phoneNumbers=[9876043210, 9870543201, 9806543021, 9876540021]]
Student [studentId=S002, firstName=Akash, lastName=Komma, fullName=Akash Komma, age=21, courseFee=28000.0, phoneNumbers=[9876540321, 9876504321, 9876054321, 9870543201, 9806543021]]
----------------------------------------------------------------------------------

11. A Program to show how to use peek method:
Program: StreamInterfaceProgram11.java
Notes:
* Method signature:
Stream<T> peek(Consumer<? super T> action)
Output:
Employee [eid=E01, ename=Akash, age=25, esal=25000.0]
Employee [eid=E02, ename=Mukesh, age=29, esal=35000.0]
Employee [eid=E02, ename=Mukesh, age=29, esal=35000.0]
Mukesh
Employee [eid=E05, ename=Vignesh, age=28, esal=30000.0]
Employee [eid=E05, ename=Vignesh, age=28, esal=30000.0]
Vignesh
Employee [eid=E03, ename=Ramesh, age=21, esal=19000.0]
Employee [eid=E04, ename=Avinash, age=31, esal=55000.0]
Employee [eid=E04, ename=Avinash, age=31, esal=55000.0]
Avinash
----------------------------------------------------------------------------------

12. A Program to show how to use limit method:
Program: StreamInterfaceProgram12.java
Notes:
* Method signature:
Stream<T> limit(long maxSize)
* If maxSize is equals to zero then limit method return empty stream.
* If maxSize is negative value then limit method throw java.lang.IllegalArgumentException.
* If maxSize is greaterthan or equals to stream size then limit method return all elements of stream.
* If maxSize is equals to long max value then limit method return all elements of stream.
Output:
----- Students are limited upto zero ------
----- Students are limited upto two ------
Student [studentId=S001, firstName=Ravi, lastName=Rajam, fullName=Ravi Rajam, age=25, courseFee=25000.0, phoneNumbers=[9876543210, 9876543201, 9876543021]]
Student [studentId=S002, firstName=Akash, lastName=Komma, fullName=Akash Komma, age=21, courseFee=28000.0, phoneNumbers=[9876540321, 9876504321, 9876054321, 9870543201, 9806543021]]
----- Students are limited upto four ------
Student [studentId=S001, firstName=Ravi, lastName=Rajam, fullName=Ravi Rajam, age=25, courseFee=25000.0, phoneNumbers=[9876543210, 9876543201, 9876543021]]
Student [studentId=S002, firstName=Akash, lastName=Komma, fullName=Akash Komma, age=21, courseFee=28000.0, phoneNumbers=[9876540321, 9876504321, 9876054321, 9870543201, 9806543021]]
Student [studentId=S003, firstName=Avinath, lastName=Karre, fullName=Avinath Karre, age=26, courseFee=30000.0, phoneNumbers=[9870654321]]
Student [studentId=S004, firstName=Zaffer, lastName=MD, fullName=Zaffer MD, age=29, courseFee=35000.0, phoneNumbers=[9876543200, 9876543001]]
----- Students are limited upto Long max value ------
Student [studentId=S001, firstName=Ravi, lastName=Rajam, fullName=Ravi Rajam, age=25, courseFee=25000.0, phoneNumbers=[9876543210, 9876543201, 9876543021]]
Student [studentId=S002, firstName=Akash, lastName=Komma, fullName=Akash Komma, age=21, courseFee=28000.0, phoneNumbers=[9876540321, 9876504321, 9876054321, 9870543201, 9806543021]]
Student [studentId=S003, firstName=Avinath, lastName=Karre, fullName=Avinath Karre, age=26, courseFee=30000.0, phoneNumbers=[9870654321]]
Student [studentId=S004, firstName=Zaffer, lastName=MD, fullName=Zaffer MD, age=29, courseFee=35000.0, phoneNumbers=[9876543200, 9876543001]]
Student [studentId=S005, firstName=Ganesh, lastName=Poly, fullName=Ganesh Poly, age=31, courseFee=29000.0, phoneNumbers=[9876543010, 9876540201, 9876503021]]
Student [studentId=S006, firstName=Vijay, lastName=Peddi, fullName=Vijay Peddi, age=22, courseFee=28500.0, phoneNumbers=[9876043210, 9870543201, 9806543021, 9876540021]]
Student [studentId=S007, firstName=Mahi, lastName=, fullName=Mahi , age=26, courseFee=28500.0, phoneNumbers=[]]
----------------------------------------------------------------------------------

13. A Program to show how to use skip method:
Program: StreamInterfaceProgram13.java
Notes:
* Method signature:
Stream<T> skip(long n)
* If n is equals to zero then skip method return all elements of stream.
* If n is negative value then skip method throw java.lang.IllegalArgumentException.
* if n is equals to Long max value then skip method return empty stream.
Output:
----- Students are skipped upto zero ------
Student [studentId=S001, firstName=Ravi, lastName=Rajam, fullName=Ravi Rajam, age=25, courseFee=25000.0, phoneNumbers=[9876543210, 9876543201, 9876543021]]
Student [studentId=S002, firstName=Akash, lastName=Komma, fullName=Akash Komma, age=21, courseFee=28000.0, phoneNumbers=[9876540321, 9876504321, 9876054321, 9870543201, 9806543021]]
Student [studentId=S003, firstName=Avinath, lastName=Karre, fullName=Avinath Karre, age=26, courseFee=30000.0, phoneNumbers=[9870654321]]
Student [studentId=S004, firstName=Zaffer, lastName=MD, fullName=Zaffer MD, age=29, courseFee=35000.0, phoneNumbers=[9876543200, 9876543001]]
Student [studentId=S005, firstName=Ganesh, lastName=Poly, fullName=Ganesh Poly, age=31, courseFee=29000.0, phoneNumbers=[9876543010, 9876540201, 9876503021]]
Student [studentId=S006, firstName=Vijay, lastName=Peddi, fullName=Vijay Peddi, age=22, courseFee=28500.0, phoneNumbers=[9876043210, 9870543201, 9806543021, 9876540021]]
Student [studentId=S007, firstName=Mahi, lastName=, fullName=Mahi , age=26, courseFee=28500.0, phoneNumbers=[]]
----- Students are skipped upto three ------
Student [studentId=S004, firstName=Zaffer, lastName=MD, fullName=Zaffer MD, age=29, courseFee=35000.0, phoneNumbers=[9876543200, 9876543001]]
Student [studentId=S005, firstName=Ganesh, lastName=Poly, fullName=Ganesh Poly, age=31, courseFee=29000.0, phoneNumbers=[9876543010, 9876540201, 9876503021]]
Student [studentId=S006, firstName=Vijay, lastName=Peddi, fullName=Vijay Peddi, age=22, courseFee=28500.0, phoneNumbers=[9876043210, 9870543201, 9806543021, 9876540021]]
Student [studentId=S007, firstName=Mahi, lastName=, fullName=Mahi , age=26, courseFee=28500.0, phoneNumbers=[]]
----- Students are skipped upto Long max value ------
----------------------------------------------------------------------------------

14. A Program to show how to use takeWhile method:
Program: StreamInterfaceProgram14.java
Notes:
* Method signature:
default Stream<T> takeWhile(Predicate<? super T> predicate)
* It will takes the elements from the stream until it matches the given predicate.
Output:
----- take while age lessthan or equals to 25 from unSorted List -----
Student [studentId=S001, firstName=Ravi, lastName=Rajam, fullName=Ravi Rajam, age=25, courseFee=25000.0, phoneNumbers=[9876543210, 9876543201, 9876543021]]
Student [studentId=S002, firstName=Akash, lastName=Komma, fullName=Akash Komma, age=21, courseFee=28000.0, phoneNumbers=[9876540321, 9876504321, 9876054321, 9870543201, 9806543021]]
----- take while age lessthan or equals to 25 from sorted List -----
Student [studentId=S002, firstName=Akash, lastName=Komma, fullName=Akash Komma, age=21, courseFee=28000.0, phoneNumbers=[9876540321, 9876504321, 9876054321, 9870543201, 9806543021]]
Student [studentId=S006, firstName=Vijay, lastName=Peddi, fullName=Vijay Peddi, age=22, courseFee=28500.0, phoneNumbers=[9876043210, 9870543201, 9806543021, 9876540021]]
Student [studentId=S001, firstName=Ravi, lastName=Rajam, fullName=Ravi Rajam, age=25, courseFee=25000.0, phoneNumbers=[9876543210, 9876543201, 9876543021]]
----------------------------------------------------------------------------------

15. A Program to show how to use takeWhile method:
Program: StreamInterfaceProgram15.java
Notes:
* Method signature:
default Stream<T> dropWhile(Predicate<? super T> predicate)
* It will drop the elements from the stream until it matches the given predicate.
Output:
----- drop while age lessthan or equals to 25 from unSorted List -----
Student [studentId=S003, firstName=Avinath, lastName=Karre, fullName=Avinath Karre, age=26, courseFee=30000.0, phoneNumbers=[9870654321]]
Student [studentId=S004, firstName=Zaffer, lastName=MD, fullName=Zaffer MD, age=29, courseFee=35000.0, phoneNumbers=[9876543200, 9876543001]]
Student [studentId=S005, firstName=Ganesh, lastName=Poly, fullName=Ganesh Poly, age=31, courseFee=29000.0, phoneNumbers=[9876543010, 9876540201, 9876503021]]
Student [studentId=S006, firstName=Vijay, lastName=Peddi, fullName=Vijay Peddi, age=22, courseFee=28500.0, phoneNumbers=[9876043210, 9870543201, 9806543021, 9876540021]]
Student [studentId=S007, firstName=Mahi, lastName=, fullName=Mahi , age=26, courseFee=28500.0, phoneNumbers=[]]
----- drop while age lessthan or equals to 25 from sorted List -----
Student [studentId=S003, firstName=Avinath, lastName=Karre, fullName=Avinath Karre, age=26, courseFee=30000.0, phoneNumbers=[9870654321]]
Student [studentId=S007, firstName=Mahi, lastName=, fullName=Mahi , age=26, courseFee=28500.0, phoneNumbers=[]]
Student [studentId=S004, firstName=Zaffer, lastName=MD, fullName=Zaffer MD, age=29, courseFee=35000.0, phoneNumbers=[9876543200, 9876543001]]
Student [studentId=S005, firstName=Ganesh, lastName=Poly, fullName=Ganesh Poly, age=31, courseFee=29000.0, phoneNumbers=[9876543010, 9876540201, 9876503021]]
----------------------------------------------------------------------------------

16. A Program to show how to use forEach, forEachOrdered method:
Program: StreamInterfaceProgram16.java
Notes:
* Method signature:
void forEach(Consumer<? super T> action)
void forEachOrdered(Consumer<? super T> action)
Output:
------ Traversing stream by forEach method -------
Employee [eid=E01, ename=Akash, age=25, esal=25000.0]
Employee [eid=E02, ename=Mukesh, age=29, esal=35000.0]
Employee [eid=E05, ename=Vignesh, age=28, esal=30000.0]
Employee [eid=E03, ename=Ramesh, age=21, esal=19000.0]
Employee [eid=E04, ename=Avinash, age=31, esal=55000.0]
------ Traversing stream by forEachOrder method -------
Employee [eid=E01, ename=Akash, age=25, esal=25000.0]
Employee [eid=E02, ename=Mukesh, age=29, esal=35000.0]
Employee [eid=E05, ename=Vignesh, age=28, esal=30000.0]
Employee [eid=E03, ename=Ramesh, age=21, esal=19000.0]
Employee [eid=E04, ename=Avinash, age=31, esal=55000.0]
----------------------------------------------------------------------------------

17. A Program to show how to use toArray method:
Program: StreamInterfaceProgram17.java
Notes:
* Method signature:
Object[] toArray()
Output:
------ Traversing object array ------
Employee [eid=E01, ename=Akash, age=25, esal=25000.0]
Employee [eid=E02, ename=Mukesh, age=29, esal=35000.0]
Employee [eid=E05, ename=Vignesh, age=28, esal=30000.0]
Employee [eid=E03, ename=Ramesh, age=21, esal=19000.0]
Employee [eid=E04, ename=Avinash, age=31, esal=55000.0]
----------------------------------------------------------------------------------

18. A Program to show how to use forEach,  method:
Program: StreamInterfaceProgram18.java
Notes:
* Method signature:
<A> A[] toArray(IntFunction<A[]> generator)
Output:
------ Traversing employee array ------
Employee [eid=E01, ename=Akash, age=25, esal=25000.0]
Employee [eid=E02, ename=Mukesh, age=29, esal=35000.0]
Employee [eid=E05, ename=Vignesh, age=28, esal=30000.0]
Employee [eid=E03, ename=Ramesh, age=21, esal=19000.0]
Employee [eid=E04, ename=Avinash, age=31, esal=55000.0]
------- Traversing ename array -------
Akash
Mukesh
Vignesh
Ramesh
Avinash