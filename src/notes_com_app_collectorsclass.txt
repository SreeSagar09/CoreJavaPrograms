1. A Program to show how to use 'toCollection' method:
Program: CollectorsClassProgram1.java
Notes:
* Method signature:
public static <T, C extends Collection<T>> Collector<T, ?, C> toCollection(Supplier<C> collectionFactory)
* This 'toCollection' method return mutable supplier type collection object.
Output:
----- Collection to ArrayList -----
Employee [eid=E01, ename=Akash, age=25, esal=25000.0]
Employee [eid=E02, ename=Mukesh, age=29, esal=35000.0]
Employee [eid=E05, ename=Vignesh, age=28, esal=30000.0]
Employee [eid=E03, ename=Ramesh, age=21, esal=19000.0]
Employee [eid=E04, ename=Avinash, age=31, esal=55000.0]
----- Collecton to LinkedList -----
Employee [eid=E01, ename=Akash, age=25, esal=25000.0]
Employee [eid=E02, ename=Mukesh, age=29, esal=35000.0]
Employee [eid=E05, ename=Vignesh, age=28, esal=30000.0]
Employee [eid=E03, ename=Ramesh, age=21, esal=19000.0]
Employee [eid=E04, ename=Avinash, age=31, esal=55000.0]
----- Collection to HashSet -----
Employee [eid=E01, ename=Akash, age=25, esal=25000.0]
Employee [eid=E03, ename=Ramesh, age=21, esal=19000.0]
Employee [eid=E02, ename=Mukesh, age=29, esal=35000.0]
Employee [eid=E05, ename=Vignesh, age=28, esal=30000.0]
Employee [eid=E04, ename=Avinash, age=31, esal=55000.0]
----------------------------------------------------------------------------------

2. A Program to show how to use 'toList' method:
Program: CollectorsClassProgram2.java
Notes:
* Method signature:
public static <T> Collector<T, ?, List<T>> toList()
* This 'toList' method mutable List object.
Output:
----- ProductName List -----
Books
Pencils
Bags
Balls
Pens
Bats
Box
----------------------------------------------------------------------------------

3. A Program to show how to use 'toMap' method:
Program: CollectorsClassProgram3.java
Notes:
* Method signature:
public static <T, K, U> Collector<T, ?, Map<K,U>> toMap(Function<? super T, ? extends K> keyMapper, Function<? super T, ? extends U> valueMapper)
* This 'toMap' method return mutable Map object.
Output:
----- ProductCode and ProductName map -----
P005 --> Pens
P004 --> Balls
P007 --> Box
P006 --> Bats
P001 --> Books
P003 --> Bags
P002 --> Pencils
----- ProductName and Price map -----
Bats --> 560.0
Bags --> 250.0
Box --> 150.0
Balls --> 30.0
Books --> 25.0
Pencils --> 5.0
Pens --> 15.0
----------------------------------------------------------------------------------

4. A Program to show how to use 'toMap' method:
Program: CollectorsClassProgram4.java
Notes:
* Method signature:
public static <T, K, U> Collector<T, ?, Map<K,U>> toMap(Function<? super T, ? extends K> keyMapper, Function<? super T, ? extends U> valueMapper, BinaryOperator<U> mergeFunction)
Output:
-------- All Products --------
P001 - Books - 12 - 25.0
P002 - Pencils - 54 - 5.0
P003 - Bags - 24 - 250.0
P004 - Balls - 34 - 30.0
P005 - Pens - 120 - 15.0
P006 - Bats - 10 - 560.0
P007 - Box - 45 - 150.0
P008 - Bags - 25 - 300.0
P009 - Bats - 5 - 500.0
--- ProductName and Quantity map[if productName is duplicate then first comes quantity as value.] ---
Bats - 10
Bags - 24
Box - 45
Balls - 34
Books - 12
Pencils - 54
Pens - 120
--- ProductName and Quantity map[if productName is duplicate then last comes quantity as value.] ---
Bats - 5
Bags - 25
Box - 45
Balls - 34
Books - 12
Pencils - 54
Pens - 120
--- ProductName and Quantity map[if productName is duplicate then minimum price as value.] ---
Bats - 500.0
Bags - 250.0
Box - 150.0
Balls - 30.0
Books - 25.0
Pencils - 5.0
Pens - 15.0
--- ProductName and Quantity map[if productName is duplicate then maximum price as value.] ---
Bats - 560.0
Bags - 300.0
Box - 150.0
Balls - 30.0
Books - 25.0
Pencils - 5.0
Pens - 15.0
----------------------------------------------------------------------------------

5. A Program to show how to use 'toMap' method:
Program: CollectorsClassProgram5.java
Notes:
* Method signature:
public static <T, K, U, M extends Map<K, U>> Collector<T, ?, M> toMap(Function<? super T, ? extends K> keyMapper, Function<? super T, ? extends U> valueMapper, BinaryOperator<U> mergeFunction, Supplier<M> mapFactory)
Output:
-------- All Products --------
P001 - Books - 12 - 25.0
P002 - Pencils - 54 - 5.0
P003 - Bags - 24 - 250.0
P004 - Balls - 34 - 30.0
P005 - Pens - 120 - 15.0
P006 - Bats - 10 - 560.0
P007 - Box - 45 - 150.0
P008 - Bags - 25 - 300.0
P009 - Bats - 5 - 500.0
--- ProductName and Quantity HashMap[if productName is duplicate then minimum quantity as value.] ---
Bats - 5
Bags - 24
Box - 45
Balls - 34
Books - 12
Pencils - 54
Pens - 120
--- ProductName and Quantity LinkedHashMap[if productName is duplicate then maximum quantity as value.] ---
Books - 12
Pencils - 54
Bags - 25
Balls - 34
Pens - 120
Bats - 10
Box - 45
--- ProductName and Quantity LinkedHashMap[if productName is duplicate then first come quantity as value.] ---
Books - 12
Pencils - 54
Bags - 24
Balls - 34
Pens - 120
Bats - 10
Box - 45
--- ProductName and Quantity LinkedHashMap[if productName is duplicate then last come quantity as value.] ---
Books - 12
Pencils - 54
Bags - 25
Balls - 34
Pens - 120
Bats - 5
Box - 45
--- ProductName and Quantity LinkedHashMap[if productName is duplicate then sum of quantity as value.] ---
Books - 12
Pencils - 54
Bags - 49
Balls - 34
Pens - 120
Bats - 15
Box - 45
----------------------------------------------------------------------------------

6. A Program to show how to use 'toUnmodifiableList' method:
Program: CollectorsClassProgram6.java
Notes:
* Method signature:
public static <T> Collector<T, ?, List<T>> toUnmodifiableList()
* This 'toUnmodifiableList' method return immutable List object.
* If we try to modify the list then it will throw 'java.lang.UnsupportedOperationException' exception.
* If Collector encounter with null value, it will throw 'java.lang.NullPointerException' exception.
Output:
------ Product name unmodifiable/immutable list -------
Books
Pencils
Bags
Balls
Pens
Bats
Box
------ Product name and code unmodifiable/immutable list ------
Books[P001]
Pencils[P002]
Bags[P003]
Balls[P004]
Pens[P005]
Bats[P006]
Box[P007]
----------------------------------------------------------------------------------

7. A Program to show how to use 'toSet' method:
Program: CollectorsClassProgram7.java
Notes:
* Method signature:
public static <T> Collector<T, ?, Set<T>> toSet()
* This 'toSet' method return mutable Set object.
Output:
------ Product name set -------
null
Bats
Bags
Box
Balls
Books
Pencils
Pens
------ Product name and code set ------
Books[P001]
Pens[P005]
Pencils[P002]
Bags[P003]
Bats[P006]
Balls[P004]
Bags[P008]
null[P009]
Box[P007]
----------------------------------------------------------------------------------

8. A Program to show how to use 'toUnmodifiableSet' method:
Program: CollectorsClassProgram8.java
Notes:
* Method signature:
public static <T> Collector<T, ?, Set<T>> toUnmodifiableSet()
* This 'toUnmodifiableSet' method return immutable Set object.
* If we try to modify the set then it will throw 'java.lang.UnsupportedOperationException' exception.
* If Collector encounter with null value, it will throw 'java.lang.NullPointerException' exception.
Output:
------ Product name unmodifiable/immutable set -------
Pencils
Pens
Bags
Balls
Box
Bats
Books
------ Product name and code unmodifiable/immutable set ------
Balls[P004]
Pens[P005]
Bats[P009]
Bags[P003]
Pencils[P002]
Bats[P006]
Books[P001]
Box[P007]
Bags[P008]
----------------------------------------------------------------------------------

9. A Program to show how to use 'joining' method:
Program: CollectorsClassProgram9.java
Notes:
* Method signature:
public static Collector<CharSequence, ?, String> joining()
public static Collector<CharSequence, ?, String> joining(CharSequence delimiter)
public static Collector<CharSequence, ?, String> joining(CharSequence delimiter, CharSequence prefix, CharSequence suffix)
Output:
----- Joining product names -----
BooksPencilsBagsBallsPensBatsBox
----- Joining product names delimiter-----
Books, Pencils, Bags, Balls, Pens, Bats, Box
----- Joining product names delimiter and prefix and suffix -----
@Books-Pencils-Bags-Balls-Pens-Bats-Box#
----------------------------------------------------------------------------------

10. A Program to show how to use 'mapping' method:
Program: CollectorsClassProgram10.java
Notes:
* Method signature:
public static <T, U, A, R> Collector<T, ?, R> mapping(Function<? super T, ? extends U> mapper, Collector<? super U, A, R> downstream)
Output:
------- Product name list --------
Books
Pencils
Bags
Balls
Pens
Bats
Box
------- Sum of all products price -------
1035.0
------- Maximum quantity value ------
120
--------- Minimum quantity value --------
10
----------------------------------------------------------------------------------

11. A Program to show how to use 'flatMapping' method:
Program: CollectorsClassProgram11.java
Notes:
* Method signature:
public static <T, U, A, R> Collector<T, ?, R> flatMapping(Function<? super T, ? extends Stream<? extends U>> mapper, Collector<? super U, A, R> downstream)
* This 'flatMapping' method is introduced in java 9 version.
Output:
------- Set of phone numbers -------
9876503021
9876043210
9870654321
9876540021
9876543001
9876504321
9806543021
9876543010
9876543200
9876543201
9876540321
9870543201
9876543210
9876054321
9876540201
9876543021
----------------------------------------------------------------------------------

12. A Program to show how to use 'filtering' method:
Program: CollectorsClassProgram12.java
Notes:
* Method signature:
public static <T, A, R> Collector<T, ?, R> filtering(Predicate<? super T> predicate, Collector<? super T, A, R> downstream)
* This 'filtering' method is introduced in java 9 version.
Output:
----- Price greater than 50.00 product list -----
Product [productId=3, productCode=P003, productName=Bags, quantity=24, price=250.0]
Product [productId=6, productCode=P006, productName=Bats, quantity=10, price=560.0]
Product [productId=7, productCode=P007, productName=Box, quantity=45, price=150.0]
------ Quantity less than 50 product list ------
Product [productId=1, productCode=P001, productName=Books, quantity=12, price=25.0]
Product [productId=3, productCode=P003, productName=Bags, quantity=24, price=250.0]
Product [productId=4, productCode=P004, productName=Balls, quantity=34, price=30.0]
Product [productId=6, productCode=P006, productName=Bats, quantity=10, price=560.0]
Product [productId=7, productCode=P007, productName=Box, quantity=45, price=150.0]
----------------------------------------------------------------------------------

13. A Program to show how to use 'minBy' and 'maxBy' method:
Program: CollectorsClassProgram13.java
Notes:
* Method signature:
public static <T> Collector<T, ?, Optional<T>> minBy(Comparator<? super T> comparator)
public static <T> Collector<T, ?, Optional<T>> maxBy(Comparator<? super T> comparator)
Output:
------- Minimum price product --------
Product [productId=2, productCode=P002, productName=Pencils, quantity=54, price=5.0]
------- Maximum price product -------
Product [productId=6, productCode=P006, productName=Bats, quantity=10, price=560.0]
------- Minimum quantity product ------
Product [productId=6, productCode=P006, productName=Bats, quantity=10, price=560.0]
------ Maximum quantity product -------
Product [productId=5, productCode=P005, productName=Pens, quantity=120, price=15.0]
----------------------------------------------------------------------------------

14. A Program to show how to use 'collectingAndThen' method:
Program: CollectorsClassProgram14.java
Notes:
* Method signature:
public static<T,A,R,RR> Collector<T,A,RR> collectingAndThen(Collector<T,A,R> downstream, Function<R,RR> finisher)
Output:
---- Minimum price product name ------
Pencils - 5.0
------ Maximum price product name ------
Bats - 560.0
----------------------------------------------------------------------------------

15. A Program to show how to use 'counting' method:
Program: CollectorsClassProgram15.java
Notes:
* Method signature:
public static <T> Collector<T, ?, Long> counting()
Output:
----- Total products count ------
7
----- Price greater than 50.00 products count -----
3
----------------------------------------------------------------------------------

16. A Program to show how to use 'summingInt', 'summingLong' and 'summingDouble' method:
Program: CollectorsClassProgram16.java
Notes:
* Method signature:
public static <T> Collector<T, ?, Integer> summingInt(ToIntFunction<? super T> mapper)
public static <T> Collector<T, ?, Long> summingLong(ToLongFunction<? super T> mapper)
public static <T> Collector<T, ?, Double> summingDouble(ToDoubleFunction<? super T> mapper)
Output:
------- Sum of product quantity by summingInt method -------
299
------ Sum of product quantity by summingLong method -------
299
------ Sum of product price by summingDouble method --------
1035.0
----------------------------------------------------------------------------------

17. A Program to show how to use 'averagingInt', 'averagingLong' and 'averagingDouble' method:
Program: CollectorsClassProgram17.java
Notes:
* Method signature:
public static <T> Collector<T, ?, Double> averagingInt(ToIntFunction<? super T> mapper)
public static <T> Collector<T, ?, Double> averagingLong(ToLongFunction<? super T> mapper)
public static <T> Collector<T, ?, Double> averagingDouble(ToDoubleFunction<? super T> mapper)
Output:
------ Average of product quantity by averagingInt method ------
42.714285714285715
------ Average of product quantity by averageingLong method -----
42.714285714285715
----- Average of product price by averagingDouble method ------
147.85714285714286
----------------------------------------------------------------------------------

18. A Program to show how to use 'averagingInt', 'averagingLong' and 'averagingDouble' method:
Program: CollectorsClassProgram18.java
Notes:
* Method signature:
public static <T> Collector<T, ?, T> reducing(T identity, BinaryOperator<T> op)
public static <T> Collector<T, ?, Optional<T>> reducing(BinaryOperator<T> op)
public static <T, U> Collector<T, ?, U> reducing(U identity, Function<? super T, ? extends U> mapper, BinaryOperator<U> op)
Output:
--- Sum of product quantity by reducing[1-argument] method ---
299
--- Sum of product quantity by reducing[2-argument] method ---
299
--- Sum of product quantity by reducing[3-argument] method ---
299
--- Sum of product price by reducing[3-argument] method ---
1035.0
----------------------------------------------------------------------------------

19. A Program to show how to use 'averagingInt', 'averagingLong' and 'averagingDouble' method:
Program: CollectorsClassProgram19.java
Notes:
* Method signature:
public static <T, K> Collector<T, ?, Map<K, List<T>>> groupingBy(Function<? super T, ? extends K> classifier)
public static <T, K, A, D> Collector<T, ?, Map<K, D>> groupingBy(Function<? super T, ? extends K> classifier, Collector<? super T, A, D> downstream)
public static <T, K, D, A, M extends Map<K, D>> Collector<T, ?, M> groupingBy(Function<? super T, ? extends K> classifier, Supplier<M> mapFactory, Collector<? super T, A, D> downstream)
Output: